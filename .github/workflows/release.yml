name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "🏷️ Release version: ${VERSION}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate package.json version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "📦 Package.json version: v${PACKAGE_VERSION}"
          echo "🏷️ Git tag version: ${{ steps.version.outputs.version }}"

  test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full linting
        run: npm run lint

      - name: Run unit tests with coverage
        run: npm run test:run -- --coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: release-test-results
          path: |
            coverage/
            test-results/
          retention-days: 90

  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Create release package
        run: |
          mkdir -p release-package
          cp -r dist/ release-package/
          cp package.json release-package/
          cp README.md release-package/
          tar -czf release-${{ needs.validate.outputs.version }}.tar.gz -C release-package .

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ needs.validate.outputs.version }}
          path: release-${{ needs.validate.outputs.version }}.tar.gz
          retention-days: 365

  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate, test, build]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generowanie changelog..."
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD > CHANGELOG.tmp
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.tmp >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or update release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = "${{ needs.validate.outputs.version }}";
            const changelog = `${{ steps.changelog.outputs.changelog }}`;
            
            const releaseBody = `## 🚀 Release ${version}
            
            ### 📋 Zmiany w tej wersji:
            ${changelog}
            
            ### 🔧 Szczegóły techniczne:
            - ✅ Wszystkie testy jednostkowe przeszły
            - ✅ Build produkcyjny zakończony sukcesem  
            - ✅ Pokrycie testami dostępne w artifaktach
            - 📦 Artefakty release dostępne do pobrania
            
            ### 📊 Statystyki:
            - Node.js: ${{ env.NODE_VERSION }}
            - Build time: ${new Date().toISOString()}
            `;
            
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: version
              });
              
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                body: releaseBody
              });
            } catch (error) {
              if (error.status === 404) {
                await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: version,
                  name: `Release ${version}`,
                  body: releaseBody,
                  draft: false,
                  prerelease: version.includes('-')
                });
              } else {
                throw error;
              }
            }

  notify-completion:
    name: Release Completion
    runs-on: ubuntu-latest
    needs: [validate, test, build, release-notes]
    if: always()
    steps:
      - name: Release summary
        run: |
          echo "🎉 Release Pipeline zakończony!"
          echo "📋 Podsumowanie:"
          echo "   - Wersja: ${{ needs.validate.outputs.version }}"
          echo "   - Testy: ${{ needs.test.result }}"
          echo "   - Build: ${{ needs.build.result }}"
          echo "   - Release Notes: ${{ needs.release-notes.result }}"
          
          if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ Release zakończony sukcesem!"
          else
            echo "❌ Release zakończony z błędami"
            exit 1
          fi
