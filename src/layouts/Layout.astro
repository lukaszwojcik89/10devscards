---
import "../styles/global.css";
import UserNav from "../components/UserNav.astro";

interface Props {
  title?: string;
}

const { title = "10x Astro Starter" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-gradient-to-br from-gray-50 via-white to-indigo-50/30 min-h-screen" style="--navbar-height: 72px;">
    <!-- Navigation Header -->
    <nav class="bg-white/80 backdrop-blur-md shadow-sm border-b border-gray-100/50 sticky top-0 z-50">
      <div class="container mx-auto px-6 py-4">
        <div class="flex items-center justify-between">
          <!-- Logo/Brand -->
          <a href="/" class="flex items-center gap-3 text-xl font-bold text-gray-800 hover:text-indigo-600 transition-all duration-300 group">
            <div class="w-10 h-10 bg-gradient-to-br from-indigo-500 via-purple-600 to-pink-500 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:scale-105">
              <span class="text-white text-xl">üß†</span>
            </div>
            <span class="bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
              AI Flashcards
            </span>
          </a>

          <!-- Mobile menu button -->
          <button 
            id="mobile-menu-toggle"
            class="sm:hidden p-2 rounded-lg hover:bg-gray-100 transition-colors"
            type="button"
          >
            <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
            </svg>
          </button>

          <!-- User Navigation (responsive) -->
          <div class="hidden sm:block">
            <UserNav />
          </div>
        </div>

        <!-- Mobile navigation -->
        <div id="mobile-nav" class="sm:hidden hidden mt-4 pb-4 border-t border-gray-100">
          <div class="pt-4">
            <!-- Mobile navigation content with unique IDs -->
            <div id="mobile-user-nav" class="relative hidden">
              <!-- User info -->
              <div class="flex items-center justify-between mb-4 pb-4 border-b border-gray-100">
                <div class="flex items-center gap-3">
                  <div class="w-9 h-9 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-semibold shadow-lg">
                    <span id="mobile-user-avatar">?</span>
                  </div>
                  <div>
                    <p id="mobile-user-name" class="text-sm font-medium text-gray-900">≈Åadowanie...</p>
                    <p id="mobile-user-email" class="text-xs text-gray-500">email@example.com</p>
                  </div>
                </div>
              </div>
              
              <!-- Navigation links -->
              <div class="space-y-1 mb-4">
                <a 
                  href="/dashboard" 
                  class="flex items-center gap-3 px-3 py-2 text-sm text-gray-700 hover:bg-indigo-50 hover:text-indigo-700 transition-colors rounded-lg"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/>
                  </svg>
                  Dashboard
                </a>
                
                <a 
                  href="/decks" 
                  class="flex items-center gap-3 px-3 py-2 text-sm text-gray-700 hover:bg-indigo-50 hover:text-indigo-700 transition-colors rounded-lg"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                  </svg>
                  Moje talie
                </a>
                
                <a 
                  href="/generate-ai" 
                  class="flex items-center gap-3 px-3 py-2 text-sm text-gray-700 hover:bg-green-50 hover:text-green-700 transition-colors rounded-lg"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                  </svg>
                  Generuj AI
                </a>
              </div>
              
              <!-- Logout button -->
              <button 
                id="mobile-logout-btn"
                class="w-full px-3 py-2 text-sm text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors flex items-center justify-center gap-2"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
                </svg>
                Wyloguj siƒô
              </button>
            </div>

            <div id="mobile-guest-nav" class="flex flex-col gap-3">
              <a href="/login" class="px-4 py-2 text-sm text-gray-600 hover:text-gray-900 font-medium transition-colors text-center border border-gray-300 rounded-lg">
                Logowanie
              </a>
              <a 
                href="/register" 
                class="px-4 py-2 text-sm bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all shadow-md hover:shadow-lg text-center"
              >
                Zarejestruj siƒô
              </a>
            </div>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="relative">
      <!-- Background decoration -->
      <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-indigo-100 to-purple-100 rounded-full opacity-30 blur-3xl"></div>
        <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-pink-100 to-indigo-100 rounded-full opacity-30 blur-3xl"></div>
      </div>
      
      <!-- Content wrapper -->
  <div class="relative z-10" style="padding-top: var(--navbar-height)">
        <slot />
      </div>
    </div>

    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
        const mobileNav = document.getElementById("mobile-nav");

        mobileMenuToggle?.addEventListener("click", () => {
          mobileNav?.classList.toggle("hidden");
        });

        // Close mobile menu when clicking outside
        document.addEventListener("click", (e) => {
          if (mobileNav && !mobileNav.contains(e.target) && !mobileMenuToggle?.contains(e.target)) {
            mobileNav.classList.add("hidden");
          }
        });

        // Mobile auth logic
        const mobileUserNav = document.getElementById("mobile-user-nav");
        const mobileGuestNav = document.getElementById("mobile-guest-nav");
        const mobileUserEmail = document.getElementById("mobile-user-email");
        const mobileUserName = document.getElementById("mobile-user-name");
        const mobileUserAvatar = document.getElementById("mobile-user-avatar");
        const mobileLogoutBtn = document.getElementById("mobile-logout-btn");

        // Function to generate name from email
        function generateNameFromEmail(email) {
          const username = email.split('@')[0];
          return username
            .replace(/[._-]/g, ' ')
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ');
        }

        // Check auth status for mobile
        const token = localStorage.getItem("access_token");
        if (token) {
          fetch("/api/auth/me", {
            method: "GET",
            headers: {
              "Authorization": `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          })
          .then(response => {
            if (response.ok) {
              return response.json();
            }
            throw new Error("Token invalid");
          })
          .then(data => {
            const user = data.data;
            const generatedName = generateNameFromEmail(user.email);
            const initials = generatedName.split(' ').map(word => word.charAt(0)).join('').substring(0, 2);
            
            if (mobileUserEmail) mobileUserEmail.textContent = user.email;
            if (mobileUserName) mobileUserName.textContent = generatedName;
            if (mobileUserAvatar) mobileUserAvatar.textContent = initials;
            
            mobileUserNav?.classList.remove("hidden");
            mobileGuestNav?.classList.add("hidden");
          })
          .catch(() => {
            localStorage.removeItem("access_token");
            localStorage.removeItem("refresh_token");
            mobileUserNav?.classList.add("hidden");
            mobileGuestNav?.classList.remove("hidden");
          });
        } else {
          mobileUserNav?.classList.add("hidden");
          mobileGuestNav?.classList.remove("hidden");
        }

        // Mobile logout
        mobileLogoutBtn?.addEventListener("click", async () => {
          try {
            const logoutToken = localStorage.getItem("access_token");
            if (logoutToken) {
              await fetch("/api/auth/logout", {
                method: "POST",
                headers: {
                  "Authorization": `Bearer ${logoutToken}`,
                  "Content-Type": "application/json",
                },
              });
            }
          } catch {
            // Ignore logout errors
          } finally {
            localStorage.removeItem("access_token");
            localStorage.removeItem("refresh_token");
            window.location.href = "/";
          }
        });
      });
    </script>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
