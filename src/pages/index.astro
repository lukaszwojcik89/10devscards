---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <main class="container mx-auto px-4 py-8 min-h-screen bg-gradient-to-br from-indigo-50 to-purple-50">
    <div class="max-w-6xl mx-auto">
      <!-- Header -->
      <header class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-800 mb-4">üß† AI Flashcards</h1>
        <p class="text-lg text-gray-600">Ucz siƒô efektywnie z fiszkami generowanymi przez sztucznƒÖ inteligencjƒô</p>
      </header>

      <!-- Main Content -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Deck Creation Card -->
        <div class="bg-white rounded-lg shadow-lg p-6 border border-gray-100">
          <h2 class="text-2xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <span class="text-2xl">üìö</span>
            Utw√≥rz nowƒÖ taliƒô
          </h2>
          <form id="create-deck-form" class="space-y-4">
            <div>
              <label for="deck-name" class="block text-sm font-medium text-gray-700 mb-2">Nazwa talii</label>
              <input
                type="text"
                id="deck-name"
                name="name"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                placeholder="np. JavaScript podstawy"
                required
              />
            </div>
            <div>
              <label for="deck-slug" class="block text-sm font-medium text-gray-700 mb-2">Slug (URL)</label>
              <input
                type="text"
                id="deck-slug"
                name="slug"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                placeholder="javascript-podstawy"
                required
              />
            </div>
            <div>
              <label for="deck-description" class="block text-sm font-medium text-gray-700 mb-2"
                >Opis (opcjonalny)</label
              >
              <textarea
                id="deck-description"
                name="description"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                placeholder="Kr√≥tki opis talii..."></textarea>
            </div>
            <button
              type="submit"
              class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors"
            >
              Utw√≥rz taliƒô
            </button>
          </form>
        </div>

        <!-- AI Generation Card -->
        <div class="bg-white rounded-lg shadow-lg p-6 border border-gray-100">
          <h2 class="text-2xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <span class="text-2xl">ü§ñ</span>
            Generuj fiszki z AI
          </h2>
          <form id="generate-flashcards-form" class="space-y-4">
            <div>
              <label for="deck-select" class="block text-sm font-medium text-gray-700 mb-2">Wybierz taliƒô</label>
              <select
                id="deck-select"
                name="deck_id"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                required
              >
                <option value="">Wybierz taliƒô...</option>
              </select>
            </div>
            <div>
              <label for="input-text" class="block text-sm font-medium text-gray-700 mb-2">Tekst do nauki</label>
              <textarea
                id="input-text"
                name="input_text"
                rows="4"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                placeholder="Wklej tutaj tekst, z kt√≥rego AI ma wygenerowaƒá fiszki..."
                maxlength="2000"
                required></textarea>
              <p class="text-sm text-gray-500 mt-1">Maksymalnie 2000 znak√≥w</p>
            </div>
            <div>
              <label for="max-flashcards" class="block text-sm font-medium text-gray-700 mb-2">Liczba fiszek</label>
              <input
                type="number"
                id="max-flashcards"
                name="max_flashcards"
                min="1"
                max="10"
                value="5"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                required
              />
            </div>
            <button
              type="submit"
              class="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors"
            >
              Generuj fiszki üöÄ
            </button>
          </form>
        </div>
      </div>

      <!-- Recent Decks Section -->
      <section class="mt-12">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
          <span class="text-2xl">üìã</span>
          Twoje talie
        </h2>
        <div id="decks-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Decks will be loaded here -->
          <div class="text-center py-12 col-span-full">
            <p class="text-gray-500">≈Åadowanie tali...</p>
          </div>
        </div>
      </section>

      <!-- Generated Flashcards Section -->
      <section id="generated-flashcards" class="mt-12 hidden">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
          <span class="text-2xl">‚ú®</span>
          Wygenerowane fiszki
        </h2>
        <div id="flashcards-container" class="space-y-4">
          <!-- Generated flashcards will appear here -->
        </div>
      </section>
    </div>
  </main>

  <script>
    // Simple JavaScript for basic functionality
    document.addEventListener("DOMContentLoaded", () => {
      // Load decks on page load
      loadDecks();

      // Handle deck creation
      const createDeckForm = document.getElementById("create-deck-form");
      createDeckForm?.addEventListener("submit", handleCreateDeck);

      // Handle flashcard generation
      const generateForm = document.getElementById("generate-flashcards-form");
      generateForm?.addEventListener("submit", handleGenerateFlashcards);

      // Auto-generate slug from name
      const nameInput = document.getElementById("deck-name");
      const slugInput = document.getElementById("deck-slug");
      nameInput?.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;
        const slug = target.value
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, "-")
          .replace(/(^-|-$)/g, "");
        if (slugInput) {
          (slugInput as HTMLInputElement).value = slug;
        }
      });
    });

    async function loadDecks() {
      try {
        // Mock data for now - replace with actual API call
        const mockDecks = [
          {
            id: "1",
            name: "JavaScript Podstawy",
            slug: "javascript-podstawy",
            description: "Podstawowe koncepty JavaScript",
            flashcard_count: 12,
            pending_count: 3,
            created_at: "2024-01-01T00:00:00Z",
          },
        ];

        const decksList = document.getElementById("decks-list");
        const deckSelect = document.getElementById("deck-select");

        if (mockDecks.length === 0) {
          if (decksList) {
            decksList.innerHTML =
              '<div class="text-center py-12 col-span-full"><p class="text-gray-500">Nie masz jeszcze ≈ºadnych tali. Utw√≥rz pierwszƒÖ!</p></div>';
          }
          return;
        }

        // Update decks list
        if (decksList) {
          decksList.innerHTML = mockDecks
            .map(
              (deck) => `
            <div class="bg-white rounded-lg shadow-md p-6 border border-gray-100 hover:shadow-lg transition-shadow">
              <h3 class="text-lg font-semibold text-gray-800 mb-2">${deck.name}</h3>
              <p class="text-gray-600 text-sm mb-4">${deck.description || "Brak opisu"}</p>
              <div class="flex justify-between items-center text-sm text-gray-500">
                <span>Fiszek: ${deck.flashcard_count}</span>
                <span>OczekujƒÖcych: ${deck.pending_count}</span>
              </div>
              <div class="mt-4 flex gap-2">
                <button class="flex-1 bg-blue-500 text-white py-1 px-3 rounded text-sm hover:bg-blue-600">
                  PrzeglƒÖdaj
                </button>
                <button class="flex-1 bg-green-500 text-white py-1 px-3 rounded text-sm hover:bg-green-600">
                  Ucz siƒô
                </button>
              </div>
            </div>
          `
            )
            .join("");
        }

        // Update deck selector
        if (deckSelect) {
          deckSelect.innerHTML =
            '<option value="">Wybierz taliƒô...</option>' +
            mockDecks.map((deck) => `<option value="${deck.id}">${deck.name}</option>`).join("");
        }
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error("Error loading decks:", error);
        const decksList = document.getElementById("decks-list");
        if (decksList) {
          decksList.innerHTML =
            '<div class="text-center py-12 col-span-full"><p class="text-red-500">B≈ÇƒÖd podczas ≈Çadowania tali</p></div>';
        }
      }
    }

    async function handleCreateDeck(e: Event) {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const deckData = Object.fromEntries(formData);

      try {
        // Mock success for now - replace with actual API call
        // eslint-disable-next-line no-console
        console.log("Creating deck:", deckData);

        // Reset form
        form.reset();

        // Reload decks
        await loadDecks();

        // Show success message
        showMessage("Talia zosta≈Ça utworzona pomy≈õlnie!", "success");
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error("Error creating deck:", error);
        showMessage("B≈ÇƒÖd podczas tworzenia talii", "error");
      }
    }

    async function handleGenerateFlashcards(e: Event) {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const requestData = Object.fromEntries(formData);

      // Convert max_flashcards to number
      const maxFlashcards = parseInt(requestData.max_flashcards as string);
      const finalRequest = {
        ...requestData,
        max_flashcards: maxFlashcards,
      };

      try {
        const button = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        const originalText = button.textContent;
        button.textContent = "Generujƒô...";
        button.disabled = true;

        // Mock generation for now - replace with actual API call
        // eslint-disable-next-line no-console
        console.log("Generating flashcards:", finalRequest);

        // Simulate delay
        await new Promise((resolve) => setTimeout(resolve, 2000));

        // Mock response
        const mockResponse = {
          generated_flashcards: [
            {
              id: "fc1",
              question: "Co to jest closure w JavaScript?",
              answer: "Funkcja, kt√≥ra ma dostƒôp do zmiennych w swoim zewnƒôtrznym zakresie",
              status: "pending",
            },
            {
              id: "fc2",
              question: "Co to jest hoisting?",
              answer: "Mechanizm JavaScript, kt√≥ry przenosi deklaracje na g√≥rƒô zakresu",
              status: "pending",
            },
          ],
          generation_summary: {
            total_generated: 2,
            total_tokens: 150,
            total_cost_usd: 0.000075,
            model_used: "gpt-4o-mini",
          },
        };

        displayGeneratedFlashcards(mockResponse);
        showMessage(`Wygenerowano ${mockResponse.generated_flashcards.length} fiszek!`, "success");

        if (originalText) {
          button.textContent = originalText;
        }
        button.disabled = false;
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error("Error generating flashcards:", error);
        showMessage("B≈ÇƒÖd podczas generowania fiszek", "error");

        const button = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        button.textContent = "Generuj fiszki üöÄ";
        button.disabled = false;
      }
    }

    function displayGeneratedFlashcards(response: any) {
      const section = document.getElementById("generated-flashcards");
      const container = document.getElementById("flashcards-container");

      if (section) {
        section.classList.remove("hidden");
      }

      if (container) {
        container.innerHTML = `
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <h3 class="font-semibold text-blue-800 mb-2">Podsumowanie generacji</h3>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span class="text-blue-600 font-medium">Wygenerowano:</span>
                <div class="font-bold">${response.generation_summary.total_generated}</div>
              </div>
              <div>
                <span class="text-blue-600 font-medium">Tokeny:</span>
                <div class="font-bold">${response.generation_summary.total_tokens}</div>
              </div>
              <div>
                <span class="text-blue-600 font-medium">Koszt:</span>
                <div class="font-bold">$${response.generation_summary.total_cost_usd.toFixed(6)}</div>
              </div>
              <div>
                <span class="text-blue-600 font-medium">Model:</span>
                <div class="font-bold">${response.generation_summary.model_used}</div>
              </div>
            </div>
          </div>
          
          <div class="grid gap-4">
            ${response.generated_flashcards
              .map(
                (flashcard: any) => `
              <div class="bg-white rounded-lg shadow-md p-6 border border-gray-100">
                <div class="mb-4">
                  <h4 class="font-medium text-gray-800 mb-2">Pytanie:</h4>
                  <p class="text-gray-700 bg-gray-50 p-3 rounded">${flashcard.question}</p>
                </div>
                <div class="mb-4">
                  <h4 class="font-medium text-gray-800 mb-2">Odpowied≈∫:</h4>
                  <p class="text-gray-700 bg-gray-50 p-3 rounded">${flashcard.answer}</p>
                </div>
                <div class="flex gap-2">
                  <button class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors">
                    ‚úì Akceptuj
                  </button>
                  <button class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors">
                    ‚úó Odrzuƒá
                  </button>
                  <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors">
                    ‚úèÔ∏è Edytuj
                  </button>
                </div>
              </div>
            `
              )
              .join("")}
          </div>
        `;

        // Scroll to generated flashcards
        section?.scrollIntoView({ behavior: "smooth" });
      }
    }

    function showMessage(message: string, type = "info") {
      // Create toast notification
      const toast = document.createElement("div");
      toast.className =
        "fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 transition-all transform translate-x-full";

      if (type === "success") {
        toast.className += " bg-green-500 text-white";
      } else if (type === "error") {
        toast.className += " bg-red-500 text-white";
      } else {
        toast.className += " bg-blue-500 text-white";
      }

      toast.textContent = message;
      document.body.appendChild(toast);

      // Animate in
      setTimeout(() => {
        toast.classList.remove("translate-x-full");
      }, 100);

      // Remove after 3 seconds
      setTimeout(() => {
        toast.classList.add("translate-x-full");
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 300);
      }, 3000);
    }
  </script>
</Layout>
