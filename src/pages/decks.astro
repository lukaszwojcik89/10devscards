---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Moje talie | 10DevCards">
  <main class="container mx-auto px-4 py-8 min-h-screen">
    <!-- Loading state -->
    <div id="loading" class="text-center py-8">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-4"></div>
      <p class="text-gray-600">≈Åadowanie talii...</p>
    </div>

    <!-- Error state -->
    <div id="error" class="hidden text-center py-8">
      <p class="text-red-600 mb-4">Nie uda≈Ço siƒô za≈Çadowaƒá talii</p>
      <a href="/login" class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
        Zaloguj siƒô ponownie
      </a>
    </div>

    <!-- Decks content -->
    <div id="decks-content" class="hidden">
      <div class="mb-8 flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Moje talie</h1>
          <p class="text-gray-600">ZarzƒÖdzaj swoimi taliami fiszek</p>
        </div>
        <div class="flex gap-3">
          <a href="/generate-ai" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
            + Generuj AI
          </a>
          <button id="create-deck-btn" class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
            + Nowa talia
          </button>
        </div>
      </div>

      <!-- Search and filters -->
      <div class="mb-6 flex flex-wrap gap-4">
        <input 
          type="text" 
          id="search-input" 
          placeholder="Szukaj talii..." 
          class="flex-1 min-w-64 px-4 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        />
        <select id="sort-select" class="px-4 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-indigo-500">
          <option value="name_asc">Nazwa A-Z</option>
          <option value="name_desc">Nazwa Z-A</option>
          <option value="created_desc">Najnowsze</option>
          <option value="created_asc">Najstarsze</option>
          <option value="updated_desc">Ostatnio modyfikowane</option>
        </select>
      </div>

      <!-- Empty state -->
      <div id="empty-state" class="hidden text-center py-12">
        <div class="text-gray-400 text-6xl mb-4">üìö</div>
        <h3 class="text-xl font-semibold text-gray-700 mb-2">Brak talii</h3>
        <p class="text-gray-600 mb-6">Rozpocznij swojƒÖ naukƒô tworzƒÖc pierwszƒÖ taliƒô fiszek</p>
        <button class="create-deck-trigger px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">
          Stw√≥rz pierwszƒÖ taliƒô
        </button>
      </div>

      <!-- Decks grid -->
      <div id="decks-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Dynamic content -->
      </div>

      <!-- Pagination -->
      <div id="pagination" class="hidden mt-8">
        <div class="flex justify-center items-center gap-2">
        <button id="prev-btn" class="px-3 py-2 text-gray-600 hover:text-indigo-600 disabled:opacity-50 disabled:cursor-not-allowed">
          ‚Üê Poprzednia
        </button>
        <span id="page-info" class="px-4 py-2 text-gray-600"></span>
        <button id="next-btn" class="px-3 py-2 text-gray-600 hover:text-indigo-600 disabled:opacity-50 disabled:cursor-not-allowed">
          Nastƒôpna ‚Üí
        </button>
        </div>
      </div>
    </div>

    <!-- Create Deck Modal -->
    <div id="create-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Nowa talia</h3>
        <form id="create-form">
          <div class="mb-4">
            <label for="deck-name" class="block text-sm font-medium text-gray-700 mb-2">
              Nazwa talii
            </label>
            <input 
              type="text" 
              id="deck-name" 
              name="name"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="np. S≈Ç√≥wka angielskie"
            />
          </div>
          <div class="mb-4">
            <label for="deck-description" class="block text-sm font-medium text-gray-700 mb-2">
              Opis (opcjonalnie)
            </label>
            <textarea 
              id="deck-description" 
              name="description"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Kr√≥tki opis talii..."
            ></textarea>
          </div>
          <div class="flex gap-3 justify-end">
            <button type="button" id="cancel-btn" class="px-4 py-2 text-gray-600 hover:text-gray-800">
              Anuluj
            </button>
            <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
              Stw√≥rz taliƒô
            </button>
          </div>
        </form>
      </div>
      </div>
    </div>

    <!-- Edit Deck Modal -->
    <div id="edit-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Edytuj taliƒô</h3>
        <form id="edit-form">
          <input type="hidden" id="edit-deck-slug" />
          <div class="mb-4">
            <label for="edit-deck-name" class="block text-sm font-medium text-gray-700 mb-2">
              Nazwa talii
            </label>
            <input 
              type="text" 
              id="edit-deck-name" 
              name="name"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="np. S≈Ç√≥wka angielskie"
            />
          </div>
          <div class="mb-4">
            <label for="edit-deck-description" class="block text-sm font-medium text-gray-700 mb-2">
              Opis (opcjonalnie)
            </label>
            <textarea 
              id="edit-deck-description" 
              name="description"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Kr√≥tki opis talii..."
            ></textarea>
          </div>
          <div class="flex gap-3 justify-end">
            <button type="button" id="edit-cancel-btn" class="px-4 py-2 text-gray-600 hover:text-gray-800">
              Anuluj
            </button>
            <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
              Zapisz zmiany
            </button>
          </div>
        </form>
      </div>
      </div>
    </div>
  </main>
</Layout>

<script type="module">
  document.addEventListener("DOMContentLoaded", async () => {
    const loading = document.getElementById("loading");
    const error = document.getElementById("error");
    const decksContent = document.getElementById("decks-content");
    const decksGrid = document.getElementById("decks-grid");
    const emptyState = document.getElementById("empty-state");
    const pagination = document.getElementById("pagination");
    const searchInput = document.getElementById("search-input");
    const sortSelect = document.getElementById("sort-select");

    // State
    let allDecks = [];
    let filteredDecks = [];
    let currentPage = 1;
    const decksPerPage = 9;

    // Check if user is logged in
    const token = localStorage.getItem("access_token");
    if (!token) {
      window.location.href = "/login";
      return;
    }

    // Load decks
    async function loadDecks() {
      try {
        const response = await fetch("/api/decks", {
          method: "GET",
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          if (response.status === 401) {
            localStorage.removeItem("access_token");
            localStorage.removeItem("refresh_token");
            window.location.href = "/login";
            return;
          }
          throw new Error(`HTTP ${response.status}`);
        }

        const data = await response.json();
        allDecks = data.data;
        filteredDecks = [...allDecks];

        loading?.classList.add("hidden");
        decksContent?.classList.remove("hidden");

        if (allDecks.length === 0) {
          emptyState?.classList.remove("hidden");
          decksGrid?.classList.add("hidden");
        } else {
          emptyState?.classList.add("hidden");
          decksGrid?.classList.remove("hidden");
          renderDecks();
        }

      } catch {
        loading?.classList.add("hidden");
        error?.classList.remove("hidden");
      }
    }

    // Render decks
    function renderDecks() {
      const startIndex = (currentPage - 1) * decksPerPage;
      const endIndex = startIndex + decksPerPage;
      const pageDecks = filteredDecks.slice(startIndex, endIndex);

      if (decksGrid) {
        decksGrid.innerHTML = pageDecks.map(deck => `
          <div class="bg-white rounded-lg shadow hover:shadow-md transition-shadow p-6">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-lg font-semibold text-gray-800 truncate">${deck.name}</h3>
              <div class="relative">
                <button class="deck-menu-btn text-gray-400 hover:text-gray-600 p-1 rounded hover:bg-gray-100" data-slug="${deck.slug}">
                  <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <circle cx="8" cy="2" r="1.5"/>
                    <circle cx="8" cy="8" r="1.5"/>
                    <circle cx="8" cy="14" r="1.5"/>
                  </svg>
                </button>
                <div class="deck-menu hidden absolute right-0 top-8 bg-white border border-gray-200 rounded-lg shadow-lg py-1 z-10 min-w-40" data-slug="${deck.slug}">
                  <button class="edit-deck-btn w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-slug="${deck.slug}">
                    ‚úèÔ∏è Edytuj taliƒô
                  </button>
                  <button class="delete-deck-btn w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50" data-slug="${deck.slug}">
                    üóëÔ∏è Usu≈Ñ taliƒô
                  </button>
                </div>
              </div>
            </div>
            
            ${deck.description ? `<p class="text-gray-600 text-sm mb-4 line-clamp-2">${deck.description}</p>` : ''}
            
            <div class="flex justify-between text-sm text-gray-500 mb-4">
              <span>Fiszki: ${deck.flashcard_count}</span>
              <span>Do przeglƒÖdu: ${deck.due_count}</span>
            </div>
            
            <div class="flex gap-2">
              <a href="/decks/${deck.slug}" 
                 class="flex-1 px-3 py-2 bg-indigo-100 text-indigo-700 rounded text-sm text-center hover:bg-indigo-200">
                Otw√≥rz
              </a>
              ${deck.due_count > 0 ? `
                <a href="/decks/${deck.slug}?study=true" 
                   class="px-3 py-2 bg-green-100 text-green-700 rounded text-sm hover:bg-green-200">
                  Nauka
                </a>
              ` : ''}
            </div>
          </div>
        `).join('');
      }

      updatePagination();
      
      // Add event listeners for deck actions
      attachDeckActionListeners();
    }

    // Attach deck action listeners
    function attachDeckActionListeners() {
      // Dropdown menu toggle
      document.querySelectorAll('.deck-menu-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          const slug = btn.dataset.slug;
          const menu = document.querySelector(`.deck-menu[data-slug="${slug}"]`);
          
          // Close all other menus
          document.querySelectorAll('.deck-menu').forEach(m => {
            if (m !== menu) m.classList.add('hidden');
          });
          
          // Toggle current menu
          menu?.classList.toggle('hidden');
        });
      });

      // Edit deck buttons
      document.querySelectorAll('.edit-deck-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const slug = btn.dataset.slug;
          
          // Find deck data
          const deck = allDecks.find(d => d.slug === slug);
          if (deck) {
            openEditModal(deck);
          }
          
          // Close menu
          const menu = document.querySelector(`.deck-menu[data-slug="${slug}"]`);
          menu?.classList.add('hidden');
        });
      });

      // Delete deck buttons
      document.querySelectorAll('.delete-deck-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          e.preventDefault();
          e.stopPropagation();
          const slug = btn.dataset.slug;
          
          if (confirm('Czy na pewno chcesz usunƒÖƒá tƒô taliƒô? Ta akcja jest nieodwracalna.')) {
            try {
              const response = await fetch(`/api/decks/${slug}`, {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json',
                },
              });

              if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
              }

              // Reload decks
              await loadDecks();
            } catch {
              alert('Nie uda≈Ço siƒô usunƒÖƒá talii. Spr√≥buj ponownie.');
            }
          }
          
          // Close menu
          const menu = document.querySelector(`.deck-menu[data-slug="${slug}"]`);
          menu?.classList.add('hidden');
        });
      });
    }

    // Close dropdowns when clicking outside
    document.addEventListener('click', () => {
      document.querySelectorAll('.deck-menu').forEach(menu => {
        menu.classList.add('hidden');
      });
    });

    // Update pagination
    function updatePagination() {
      const totalPages = Math.ceil(filteredDecks.length / decksPerPage);
      
      if (totalPages <= 1) {
        pagination?.classList.add("hidden");
        return;
      }

      pagination?.classList.remove("hidden");
      const pageInfo = document.getElementById("page-info");
      const prevBtn = document.getElementById("prev-btn");
      const nextBtn = document.getElementById("next-btn");

      if (pageInfo) pageInfo.textContent = `Strona ${currentPage} z ${totalPages}`;
      if (prevBtn) prevBtn.disabled = currentPage === 1;
      if (nextBtn) nextBtn.disabled = currentPage === totalPages;
    }

    // Filter and search
    function filterDecks() {
      const searchTerm = searchInput?.value.toLowerCase() || '';
      const sortBy = sortSelect?.value || 'name_asc';

      // Filter by search
      filteredDecks = allDecks.filter(deck => 
        deck.name.toLowerCase().includes(searchTerm) ||
        (deck.description && deck.description.toLowerCase().includes(searchTerm))
      );

      // Sort
      const [field, direction] = sortBy.split('_');
      filteredDecks.sort((a, b) => {
        let aVal, bVal;
        
        switch (field) {
          case 'name':
            aVal = a.name.toLowerCase();
            bVal = b.name.toLowerCase();
            break;
          case 'created':
            aVal = new Date(a.created_at);
            bVal = new Date(b.created_at);
            break;
          case 'updated':
            aVal = new Date(a.updated_at);
            bVal = new Date(b.updated_at);
            break;
          default:
            return 0;
        }

        if (direction === 'desc') {
          return aVal < bVal ? 1 : aVal > bVal ? -1 : 0;
        } else {
          return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
        }
      });

      currentPage = 1;
      renderDecks();
    }

    // Event listeners
    searchInput?.addEventListener('input', filterDecks);
    sortSelect?.addEventListener('change', filterDecks);

    document.getElementById("prev-btn")?.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        renderDecks();
      }
    });

    document.getElementById("next-btn")?.addEventListener('click', () => {
      const totalPages = Math.ceil(filteredDecks.length / decksPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        renderDecks();
      }
    });

    // Modal handling
    const createModal = document.getElementById("create-modal");
    const createForm = document.getElementById("create-form");
    const editModal = document.getElementById("edit-modal");
    const editForm = document.getElementById("edit-form");
    
    function openCreateModal() {
      createModal?.classList.remove("hidden");
    }

    function closeCreateModal() {
      createModal?.classList.add("hidden");
      createForm?.reset();
    }

    function openEditModal(deck) {
      const slugInput = document.getElementById("edit-deck-slug");
      const nameInput = document.getElementById("edit-deck-name");
      const descriptionInput = document.getElementById("edit-deck-description");
      
      if (slugInput) slugInput.value = deck.slug;
      if (nameInput) nameInput.value = deck.name;
      if (descriptionInput) descriptionInput.value = deck.description || '';
      
      editModal?.classList.remove("hidden");
    }

    function closeEditModal() {
      editModal?.classList.add("hidden");
      editForm?.reset();
    }

    document.getElementById("create-deck-btn")?.addEventListener('click', openCreateModal);
    document.querySelector(".create-deck-trigger")?.addEventListener('click', openCreateModal);
    document.getElementById("cancel-btn")?.addEventListener('click', closeCreateModal);
    document.getElementById("edit-cancel-btn")?.addEventListener('click', closeEditModal);

    // Create deck
    createForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = {
        name: formData.get('name'),
        description: formData.get('description') || undefined
      };

      try {
        const response = await fetch("/api/decks", {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data)
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }

        const result = await response.json();
        closeCreateModal();
        
        // Redirect to the new deck
        window.location.href = `/decks/${result.data.slug}`;

      } catch {
        alert("Nie uda≈Ço siƒô stworzyƒá talii. Spr√≥buj ponownie.");
      }
    });

    // Edit deck
    editForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const slug = document.getElementById("edit-deck-slug").value;
      const data = {
        name: formData.get('name'),
        description: formData.get('description') || null
      };

      try {
        const response = await fetch(`/api/decks/${slug}`, {
          method: "PUT",
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data)
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }

        closeEditModal();
        
        // Reload decks to show updated data
        await loadDecks();

      } catch {
        alert("Nie uda≈Ço siƒô zaktualizowaƒá talii. Spr√≥buj ponownie.");
      }
    });

    // Initial load
    await loadDecks();
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
