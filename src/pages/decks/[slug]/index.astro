---

---

<html lang="pl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ZarzƒÖdzanie Fiszkami - 10DevCards</title>
    <link href="/styles/global.css" rel="stylesheet" />
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-50 min-h-screen">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg border-b">
      <div class="max-w-7xl mx-auto px-4">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <h1 class="text-xl font-bold text-gray-900">10DevCards</h1>
          </div>
          <div class="flex items-center space-x-4">
            <button id="logout-btn" class="text-gray-700 hover:text-gray-900">Wyloguj</button>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="max-w-6xl mx-auto px-4 py-8">
      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 id="deck-title" class="text-3xl font-bold text-gray-900">≈Åadowanie...</h1>
            <p id="deck-description" class="text-gray-600 mt-2">≈Åadowanie opisu...</p>
          </div>
          <div class="flex space-x-4">
            <button
              id="generate-flashcards-btn"
              class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              ü§ñ Generuj AI Fiszki
            </button>
            <button
              id="add-manual-flashcard-btn"
              class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
            >
              ‚ûï Dodaj Fiszkƒô
            </button>
          </div>
        </div>
      </div>

      <!-- Filters -->
      <div class="bg-white p-6 rounded-lg shadow-md mb-6">
        <h2 class="text-lg font-semibold mb-4">Filtry</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label for="status-filter" class="block text-sm font-medium text-gray-700">Status</label>
            <select id="status-filter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
              <option value="">Wszystkie</option>
              <option value="pending">OczekujƒÖce</option>
              <option value="accepted">Zaakceptowane</option>
              <option value="rejected">Odrzucone</option>
            </select>
          </div>
          <div>
            <label for="box-filter" class="block text-sm font-medium text-gray-700">Poziom Leitner</label>
            <select id="box-filter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
              <option value="">Wszystkie</option>
              <option value="box1">Box 1</option>
              <option value="box2">Box 2</option>
              <option value="box3">Box 3</option>
              <option value="graduated">Uko≈Ñczone</option>
            </select>
          </div>
          <div>
            <label for="limit-filter" class="block text-sm font-medium text-gray-700">Ilo≈õƒá na stronie</label>
            <select id="limit-filter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
              <option value="20">20</option>
              <option value="50">50</option>
              <option value="100">100</option>
            </select>
          </div>
          <div class="flex items-end">
            <button
              id="apply-filters-btn"
              class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors w-full"
            >
              Zastosuj Filtry
            </button>
          </div>
        </div>
      </div>

      <!-- Flashcards List -->
      <div class="bg-white rounded-lg shadow-md">
        <div class="p-6 border-b">
          <h2 class="text-lg font-semibold">
            Fiszki
            <span id="flashcards-count" class="text-gray-500 text-sm">(≈Çadowanie...)</span>
          </h2>
        </div>

        <div id="flashcards-container" class="divide-y">
          <!-- Loading state -->
          <div id="loading-state" class="p-8 text-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p class="mt-2 text-gray-500">≈Åadowanie fiszek...</p>
          </div>
        </div>

        <!-- Pagination -->
        <div id="pagination" class="p-6 border-t hidden">
          <div class="flex items-center justify-between">
            <div class="text-sm text-gray-700">
              Pokazano <span id="showing-from">1</span> - <span id="showing-to">20</span> z <span id="total-count"
                >0</span
              > fiszek
            </div>
            <div class="flex space-x-2">
              <button
                id="prev-page-btn"
                class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50"
                disabled
              >
                ‚Üê Poprzednia
              </button>
              <button
                id="next-page-btn"
                class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50"
              >
                Nastƒôpna ‚Üí
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add Manual Flashcard Modal -->
    <div id="add-flashcard-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-md w-full p-6">
          <h3 class="text-lg font-semibold mb-4">Dodaj NowƒÖ Fiszkƒô</h3>
          <form id="add-flashcard-form">
            <div class="mb-4">
              <label for="flashcard-question" class="block text-sm font-medium text-gray-700 mb-2">
                Pytanie (max 256 znak√≥w)
              </label>
              <textarea
                id="flashcard-question"
                rows="3"
                maxlength="256"
                class="w-full border-gray-300 rounded-md shadow-sm"
                required></textarea>
              <div class="text-right text-xs text-gray-500 mt-1">
                <span id="question-count">0</span>/256
              </div>
            </div>
            <div class="mb-6">
              <label for="flashcard-answer" class="block text-sm font-medium text-gray-700 mb-2">
                Odpowied≈∫ (max 512 znak√≥w)
              </label>
              <textarea
                id="flashcard-answer"
                rows="4"
                maxlength="512"
                class="w-full border-gray-300 rounded-md shadow-sm"
                required></textarea>
              <div class="text-right text-xs text-gray-500 mt-1">
                <span id="answer-count">0</span>/512
              </div>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancel-add-flashcard"
                class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400"
              >
                Anuluj
              </button>
              <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                Dodaj Fiszkƒô
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Generate AI Flashcards Modal -->
    <div id="generate-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-md w-full p-6">
          <h3 class="text-lg font-semibold mb-4">Generuj Fiszki AI</h3>
          <form id="generate-form">
            <div class="mb-4">
              <label for="input-text" class="block text-sm font-medium text-gray-700 mb-2"> Tekst do nauki </label>
              <textarea
                id="input-text"
                rows="5"
                class="w-full border-gray-300 rounded-md shadow-sm"
                placeholder="Wklej tutaj tekst z kt√≥rego chcesz wygenerowaƒá fiszki..."
                required></textarea>
            </div>
            <div class="mb-4">
              <label for="max-cards" class="block text-sm font-medium text-gray-700 mb-2">
                Maksymalna liczba fiszek
              </label>
              <input
                type="number"
                id="max-cards"
                min="1"
                max="20"
                value="5"
                class="w-full border-gray-300 rounded-md shadow-sm"
              />
            </div>
            <div class="mb-6">
              <label for="difficulty" class="block text-sm font-medium text-gray-700 mb-2"> Poziom trudno≈õci </label>
              <select id="difficulty" class="w-full border-gray-300 rounded-md shadow-sm">
                <option value="beginner">PoczƒÖtkujƒÖcy</option>
                <option value="intermediate" selected>≈öredniozaawansowany</option>
                <option value="advanced">Zaawansowany</option>
              </select>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancel-generate"
                class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400"
              >
                Anuluj
              </button>
              <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                ü§ñ Generuj
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <script is:inline lang="ts">
      // Global state
      let currentDeck = null;
      let currentPage = 0;
      let currentLimit = 20;
      const currentFilters = {
        status: "",
        box: "",
      };

      // Get deck slug from URL
      const pathParts = window.location.pathname.split("/");
      const deckSlug = pathParts[pathParts.length - 1];

      // Initialize
      document.addEventListener("DOMContentLoaded", async () => {
        await checkAuthState();
        await loadDeck();
        await loadFlashcards();
        setupEventListeners();
      });

      // Authentication check
      async function checkAuthState() {
        const token = localStorage.getItem("access_token");
        if (!token) {
          window.location.href = "/login";
          return;
        }

        try {
          const response = await fetch("/api/auth/me", {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          });

          if (!response.ok) {
            localStorage.removeItem("access_token");
            window.location.href = "/login";
          }
        } catch {
          localStorage.removeItem("access_token");
          window.location.href = "/login";
        }
      }

      // Load deck information
      async function loadDeck() {
        const token = localStorage.getItem("access_token");

        try {
          const response = await fetch(`/api/decks/${deckSlug}`, {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            const result = await response.json();
            currentDeck = result.data;
            document.getElementById("deck-title").textContent = currentDeck.name;
            document.getElementById("deck-description").textContent = currentDeck.description || "Brak opisu";
          } else {
            showError("Nie uda≈Ço siƒô za≈Çadowaƒá talii");
            window.location.href = "/";
          }
        } catch {
          showError("B≈ÇƒÖd podczas ≈Çadowania talii");
          window.location.href = "/";
        }
      }

      // Load flashcards
      async function loadFlashcards() {
        const token = localStorage.getItem("access_token");

        // Build query parameters
        const params = new URLSearchParams({
          deck_id: currentDeck.id,
          limit: currentLimit.toString(),
          offset: (currentPage * currentLimit).toString(),
        });

        if (currentFilters.status) {
          params.append("status", currentFilters.status);
        }
        if (currentFilters.box) {
          params.append("box", currentFilters.box);
        }

        try {
          const response = await fetch(`/api/flashcards?${params.toString()}`, {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            const result = await response.json();
            displayFlashcards(result.data);
            updatePagination(result.pagination);
          } else {
            showError("Nie uda≈Ço siƒô za≈Çadowaƒá fiszek");
          }
        } catch {
          showError("B≈ÇƒÖd podczas ≈Çadowania fiszek");
        }
      }

      // Display flashcards
      function displayFlashcards(flashcards) {
        const container = document.getElementById("flashcards-container");
        const loadingState = document.getElementById("loading-state");

        loadingState.style.display = "none";

        if (flashcards.length === 0) {
          container.innerHTML = `
          <div class="p-8 text-center text-gray-500">
            <p>Brak fiszek spe≈ÇniajƒÖcych kryteria.</p>
          </div>
        `;
          return;
        }

        const flashcardsHTML = flashcards
          .map(
            (flashcard) => `
        <div class="p-6 hover:bg-gray-50 transition-colors" data-flashcard-id="${flashcard.id}">
          <div class="flex items-start justify-between">
            <div class="flex-1 min-w-0">
              <div class="flex items-center space-x-2 mb-2">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadgeClass(flashcard.status)}">
                  ${getStatusText(flashcard.status)}
                </span>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  ${getBoxText(flashcard.box)}
                </span>
                ${flashcard.model ? `<span class="text-xs text-gray-500">ü§ñ ${flashcard.model}</span>` : ""}
              </div>
              <div class="mb-3">
                <h3 class="text-sm font-medium text-gray-900 mb-1">Pytanie:</h3>
                <p class="text-gray-700">${flashcard.question}</p>
              </div>
              <div class="mb-3">
                <h3 class="text-sm font-medium text-gray-900 mb-1">Odpowied≈∫:</h3>
                <p class="text-gray-700">${flashcard.answer}</p>
              </div>
              <div class="text-xs text-gray-500">
                Utworzono: ${new Date(flashcard.created_at).toLocaleDateString("pl-PL")}
                ${flashcard.next_due_date ? ` | Nastƒôpna powt√≥rka: ${new Date(flashcard.next_due_date).toLocaleDateString("pl-PL")}` : ""}
              </div>
            </div>
            <div class="ml-4 flex space-x-2">
              ${
                flashcard.status === "pending"
                  ? `
                <button 
                  onclick="updateFlashcardStatus('${flashcard.id}', 'accepted')"
                  class="px-3 py-1 bg-green-100 text-green-800 rounded hover:bg-green-200 text-xs"
                  title="Zaakceptuj fiszkƒô"
                >
                  ‚úì Akceptuj
                </button>
                <button 
                  onclick="updateFlashcardStatus('${flashcard.id}', 'rejected')"
                  class="px-3 py-1 bg-red-100 text-red-800 rounded hover:bg-red-200 text-xs"
                  title="Odrzuƒá fiszkƒô"
                >
                  ‚úó Odrzuƒá
                </button>
              `
                  : ""
              }
              <button 
                onclick="editFlashcard('${flashcard.id}')"
                class="px-3 py-1 bg-blue-100 text-blue-800 rounded hover:bg-blue-200 text-xs"
                title="Edytuj fiszkƒô"
              >
                ‚úèÔ∏è Edytuj
              </button>
              <button 
                onclick="deleteFlashcard('${flashcard.id}')"
                class="px-3 py-1 bg-red-100 text-red-800 rounded hover:bg-red-200 text-xs"
                title="Usu≈Ñ fiszkƒô"
              >
                üóëÔ∏è Usu≈Ñ
              </button>
            </div>
          </div>
        </div>
      `
          )
          .join("");

        container.innerHTML = flashcardsHTML;
      }

      // Update pagination
      function updatePagination(pagination) {
        document.getElementById("flashcards-count").textContent = `(${pagination.total})`;
        document.getElementById("showing-from").textContent = pagination.offset + 1;
        document.getElementById("showing-to").textContent = Math.min(
          pagination.offset + pagination.limit,
          pagination.total
        );
        document.getElementById("total-count").textContent = pagination.total;

        document.getElementById("prev-page-btn").disabled = pagination.offset === 0;
        document.getElementById("next-page-btn").disabled = !pagination.has_more;

        document.getElementById("pagination").classList.remove("hidden");
      }

      // Utility functions for status/box display
      function getStatusBadgeClass(status) {
        switch (status) {
          case "pending":
            return "bg-yellow-100 text-yellow-800";
          case "accepted":
            return "bg-green-100 text-green-800";
          case "rejected":
            return "bg-red-100 text-red-800";
          default:
            return "bg-gray-100 text-gray-800";
        }
      }

      function getStatusText(status) {
        switch (status) {
          case "pending":
            return "OczekujƒÖce";
          case "accepted":
            return "Zaakceptowane";
          case "rejected":
            return "Odrzucone";
          default:
            return status;
        }
      }

      function getBoxText(box) {
        switch (box) {
          case "box1":
            return "Box 1";
          case "box2":
            return "Box 2";
          case "box3":
            return "Box 3";
          case "graduated":
            return "Uko≈Ñczone";
          default:
            return box;
        }
      }

      // Event listeners setup
      function setupEventListeners() {
        // Filter controls
        document.getElementById("apply-filters-btn").addEventListener("click", () => {
          currentFilters.status = document.getElementById("status-filter").value;
          currentFilters.box = document.getElementById("box-filter").value;
          currentLimit = parseInt(document.getElementById("limit-filter").value);
          currentPage = 0;
          loadFlashcards();
        });

        // Pagination
        document.getElementById("prev-page-btn").addEventListener("click", () => {
          if (currentPage > 0) {
            currentPage--;
            loadFlashcards();
          }
        });

        document.getElementById("next-page-btn").addEventListener("click", () => {
          currentPage++;
          loadFlashcards();
        });

        // Modal controls
        document.getElementById("add-manual-flashcard-btn").addEventListener("click", () => {
          document.getElementById("add-flashcard-modal").classList.remove("hidden");
        });

        document.getElementById("generate-flashcards-btn").addEventListener("click", () => {
          document.getElementById("generate-modal").classList.remove("hidden");
        });

        document.getElementById("cancel-add-flashcard").addEventListener("click", () => {
          document.getElementById("add-flashcard-modal").classList.add("hidden");
          document.getElementById("add-flashcard-form").reset();
        });

        document.getElementById("cancel-generate").addEventListener("click", () => {
          document.getElementById("generate-modal").classList.add("hidden");
          document.getElementById("generate-form").reset();
        });

        // Character counters
        document.getElementById("flashcard-question").addEventListener("input", (e) => {
          document.getElementById("question-count").textContent = e.target.value.length;
        });

        document.getElementById("flashcard-answer").addEventListener("input", (e) => {
          document.getElementById("answer-count").textContent = e.target.value.length;
        });

        // Form submissions
        document.getElementById("add-flashcard-form").addEventListener("submit", handleAddFlashcard);
        document.getElementById("generate-form").addEventListener("submit", handleGenerateFlashcards);

        // Logout
        document.getElementById("logout-btn").addEventListener("click", () => {
          localStorage.removeItem("access_token");
          window.location.href = "/login";
        });
      }

      // Handle add manual flashcard
      async function handleAddFlashcard(e) {
        e.preventDefault();

        const questionEl = document.getElementById("flashcard-question");
        const answerEl = document.getElementById("flashcard-answer");

        if (!questionEl || !answerEl) return;

        const question = questionEl.value.trim();
        const answer = answerEl.value.trim();

        if (!question || !answer) {
          showError("Pytanie i odpowied≈∫ sƒÖ wymagane");
          return;
        }

        const token = localStorage.getItem("access_token");

        try {
          const response = await fetch("/api/flashcards", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              deck_id: currentDeck?.id,
              question,
              answer,
            }),
          });

          if (response.ok) {
            showSuccess("Fiszka zosta≈Ça dodana pomy≈õlnie!");
            const addModal = document.getElementById("add-flashcard-modal");
            const addForm = document.getElementById("add-flashcard-form");
            addModal?.classList.add("hidden");
            addForm?.reset();
            await loadFlashcards();
          } else {
            const error = await response.json();
            showError(error.error?.message || "Nie uda≈Ço siƒô dodaƒá fiszki");
          }
        } catch (err) {
          showError("B≈ÇƒÖd podczas dodawania fiszki");
        }
      }

      // Handle generate AI flashcards
      async function handleGenerateFlashcards(e) {
        e.preventDefault();

        const inputTextEl = document.getElementById("input-text");
        const maxCardsEl = document.getElementById("max-cards");
        const difficultyEl = document.getElementById("difficulty");

        if (!inputTextEl || !maxCardsEl || !difficultyEl) return;

        const inputText = inputTextEl.value.trim();
        const maxCards = parseInt(maxCardsEl.value);
        const difficulty = difficultyEl.value;

        if (!inputText) {
          showError("Tekst do nauki jest wymagany");
          return;
        }

        const token = localStorage.getItem("access_token");

        try {
          const response = await fetch("/api/flashcards/generate", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              deck_id: currentDeck?.id,
              input_text: inputText,
              max_cards: maxCards,
              difficulty,
            }),
          });

          if (response.ok) {
            const result = await response.json();
            showSuccess(
              `Wygenerowano ${result.generation_summary.total_generated} fiszek! Koszt: $${result.generation_summary.total_cost_usd.toFixed(6)}`
            );
            const generateModal = document.getElementById("generate-modal");
            const generateForm = document.getElementById("generate-form");
            generateModal?.classList.add("hidden");
            generateForm?.reset();
            await loadFlashcards();
          } else {
            const error = await response.json();
            showError(error.error?.message || "Nie uda≈Ço siƒô wygenerowaƒá fiszek");
          }
        } catch (err) {
          // Error handling - alert user
          showError("B≈ÇƒÖd podczas generowania fiszek");
        }
      }

      // Update flashcard status
      async function updateFlashcardStatus(flashcardId, status) {
        const token = localStorage.getItem("access_token");

        try {
          const response = await fetch(`/api/flashcards/${flashcardId}/status`, {
            method: "PATCH",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ status }),
          });

          if (response.ok) {
            showSuccess(`Fiszka zosta≈Ça ${status === "accepted" ? "zaakceptowana" : "odrzucona"}`);
            await loadFlashcards();
          } else {
            const error = await response.json();
            showError(error.error?.message || "Nie uda≈Ço siƒô zaktualizowaƒá statusu");
          }
        } catch (err) {
          // Error handling - alert user
          void err; // Suppress unused variable warning
          showError("B≈ÇƒÖd podczas aktualizacji statusu");
        }
      }

      // Edit flashcard (placeholder - would need edit modal)
      function editFlashcard(flashcardId) {
        // Placeholder - suppress unused parameter warning
        void flashcardId;
        showError("Funkcja edycji bƒôdzie dostƒôpna wkr√≥tce");
      }

      // Delete flashcard
      async function deleteFlashcard(flashcardId) {
        if (!confirm("Czy na pewno chcesz usunƒÖƒá tƒô fiszkƒô? Tej operacji nie mo≈ºna cofnƒÖƒá.")) {
          return;
        }

        const token = localStorage.getItem("access_token");

        try {
          const response = await fetch(`/api/flashcards/${flashcardId}`, {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            showSuccess("Fiszka zosta≈Ça usuniƒôta");
            await loadFlashcards();
          } else {
            const error = await response.json();
            showError(error.error?.message || "Nie uda≈Ço siƒô usunƒÖƒá fiszki");
          }
        } catch (err) {
          // Error handling - alert user
          void err; // Suppress unused variable warning
          showError("B≈ÇƒÖd podczas usuwania fiszki");
        }
      }

      // Make functions available globally for onclick handlers
      window.updateFlashcardStatus = updateFlashcardStatus;
      window.editFlashcard = editFlashcard;
      window.deleteFlashcard = deleteFlashcard;

      // Utility functions for notifications
      function showSuccess(message) {
        // Simple alert for now - could be replaced with toast notifications
        alert("‚úÖ " + message);
      }

      function showError(message) {
        // Simple alert for now - could be replaced with toast notifications
        alert("‚ùå " + message);
      }
    </script>
  </body>
</html>
