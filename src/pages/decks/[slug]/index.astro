---
import Layout from "../../../layouts/Layout.astro";
---

<Layout title="Zarządzanie Fiszkami - 10DevCards">
  <div class="max-w-6xl mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 id="deck-title" class="text-3xl font-bold text-gray-900">Ładowanie...</h1>
          <p id="deck-description" class="text-gray-600 mt-2">Ładowanie opisu...</p>
        </div>
        <div class="flex space-x-4">
          <button
            id="add-manual-flashcard-btn"
            class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
          >
            ➕ Dodaj Fiszkę
          </button>
        </div>
      </div>
    </div>

    <!-- Flashcards List -->
    <div class="bg-white rounded-lg shadow-md">
      <div class="p-6 border-b">
        <h2 class="text-lg font-semibold">
          Fiszki
          <span id="flashcards-count" class="text-gray-500 text-sm">(ładowanie...)</span>
        </h2>
      </div>

      <div id="flashcards-container" class="divide-y">
        <!-- Loading state -->
        <div id="loading-state" class="p-8 text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p class="mt-2 text-gray-500">Ładowanie fiszek...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Manual Flashcard Modal -->
  <div id="add-flashcard-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-semibold mb-4">Dodaj Nową Fiszkę</h3>
        <form id="add-flashcard-form">
          <div class="mb-4">
            <label for="flashcard-question" class="block text-sm font-medium text-gray-700 mb-2">
              Pytanie (max 256 znaków)
            </label>
            <textarea
              id="flashcard-question"
              name="question"
              rows="3"
              maxlength="256"
              class="w-full border-gray-300 rounded-md shadow-sm"
              required></textarea>
          </div>
          <div class="mb-6">
            <label for="flashcard-answer" class="block text-sm font-medium text-gray-700 mb-2">
              Odpowiedź (max 512 znaków)
            </label>
            <textarea
              id="flashcard-answer"
              name="answer"
              rows="4"
              maxlength="512"
              class="w-full border-gray-300 rounded-md shadow-sm"
              required></textarea>
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              id="cancel-add-flashcard"
              class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400"
            >
              Anuluj
            </button>
            <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
              Dodaj Fiszkę
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script is:inline>
  /* eslint-disable */
  document.addEventListener("DOMContentLoaded", async () => {
    const deckTitle = document.getElementById("deck-title");
    const deckDescription = document.getElementById("deck-description");
    const flashcardsCount = document.getElementById("flashcards-count");
    const flashcardsContainer = document.getElementById("flashcards-container");
    const loadingState = document.getElementById("loading-state");
    const addFlashcardBtn = document.getElementById("add-manual-flashcard-btn");
    const addFlashcardModal = document.getElementById("add-flashcard-modal");
    const addFlashcardForm = document.getElementById("add-flashcard-form");
    const cancelAddBtn = document.getElementById("cancel-add-flashcard");

    // Get deck slug from URL
    const pathParts = window.location.pathname.split('/');
    const deckSlug = pathParts[pathParts.length - 1];

    // Check if user is logged in
    const token = localStorage.getItem("access_token");
    if (!token) {
      window.location.href = "/login";
      return;
    }

    // Global variables to store deck info
    let currentDeck = null;
    
    // Load deck and flashcards
    async function loadDeckData() {
      try {
        // Load deck info
        const deckResponse = await fetch(`/api/decks/${deckSlug}`, {
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (deckResponse.ok) {
          const deckData = await deckResponse.json();
          const deck = deckData.data;
          currentDeck = deck; // Store for later use
          
          deckTitle.textContent = deck.name;
          deckDescription.textContent = deck.description || "Brak opisu";
        }

        // Load flashcards using deck_id from currentDeck
        if (currentDeck) {
          const flashcardsResponse = await fetch(`/api/flashcards?deck_id=${currentDeck.id}`, {
            headers: {
              "Authorization": `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          });

        if (flashcardsResponse.ok) {
          const flashcardsData = await flashcardsResponse.json();
          const flashcards = flashcardsData.data;
          
          flashcardsCount.textContent = `(${flashcards.length})`;
          loadingState.classList.add("hidden");
          
          if (flashcards.length === 0) {
            flashcardsContainer.innerHTML = `
              <div class="p-8 text-center text-gray-500">
                <p>Brak fiszek w tej talii</p>
                <p class="text-sm mt-2">Dodaj pierwszą fiszkę lub użyj generatora AI</p>
              </div>
            `;
          } else {
            renderFlashcards(flashcards);
          }
        }
        } // Close the if (currentDeck) block
      } catch (error) {
        console.error("Error loading deck data:", error);
        loadingState.innerHTML = `
          <p class="text-red-500">Błąd podczas ładowania danych</p>
        `;
      }
    }

    // Render flashcards
    function renderFlashcards(flashcards) {
      flashcardsContainer.innerHTML = flashcards.map(flashcard => `
        <div class="p-4 hover:bg-gray-50" data-id="${flashcard.id}">
          <div class="flex justify-between items-start">
            <div class="flex-1">
              <h3 class="font-medium text-gray-900 mb-2">${flashcard.question}</h3>
              <p class="text-gray-600 text-sm">${flashcard.answer}</p>
            </div>
            <div class="flex gap-2 ml-4">
              <button class="edit-flashcard-btn text-blue-600 hover:text-blue-800 text-sm" data-id="${flashcard.id}">
                Edytuj
              </button>
              <button class="delete-flashcard-btn text-red-600 hover:text-red-800 text-sm" data-id="${flashcard.id}">
                Usuń
              </button>
            </div>
          </div>
        </div>
      `).join('');

      // Add event listeners to buttons
      document.querySelectorAll('.delete-flashcard-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const flashcardId = e.target.dataset.id;
          if (confirm('Czy na pewno chcesz usunąć tę fiszkę?')) {
            await deleteFlashcard(flashcardId);
          }
        });
      });
    }

    // Delete flashcard
    async function deleteFlashcard(flashcardId) {
      try {
        const response = await fetch(`/api/flashcards/${flashcardId}`, {
          method: 'DELETE',
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          await loadDeckData(); // Reload data
        } else {
          alert('Nie udało się usunąć fiszki');
        }
      } catch (error) {
        console.error('Error deleting flashcard:', error);
        alert('Wystąpił błąd podczas usuwania fiszki');
      }
    }

    // Modal handling
    addFlashcardBtn.addEventListener('click', () => {
      addFlashcardModal.classList.remove('hidden');
    });

    cancelAddBtn.addEventListener('click', () => {
      addFlashcardModal.classList.add('hidden');
      addFlashcardForm.reset();
    });

    // Add flashcard form submission
    addFlashcardForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!currentDeck) {
        alert('Błąd: nie udało się załadować informacji o talii');
        return;
      }
      
      const formData = new FormData(e.target);
      const data = {
        question: formData.get('question'),
        answer: formData.get('answer'),
        deck_id: currentDeck.id  // Use deck_id instead of deck_slug
      };

      try {
        const response = await fetch('/api/flashcards', {
          method: 'POST',
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        if (response.ok) {
          addFlashcardModal.classList.add('hidden');
          addFlashcardForm.reset();
          await loadDeckData(); // Reload data
        } else {
          const error = await response.json();
          alert(`Błąd: ${error.error?.message || "Nie udało się dodać fiszki"}`);
        }
      } catch (error) {
        console.error('Error adding flashcard:', error);
        alert('Wystąpił błąd podczas dodawania fiszki');
      }
    });

    // Close modal when clicking outside
    addFlashcardModal.addEventListener('click', (e) => {
      if (e.target === addFlashcardModal) {
        addFlashcardModal.classList.add('hidden');
        addFlashcardForm.reset();
      }
    });

    // Initial load
    await loadDeckData();
  });
</script>
