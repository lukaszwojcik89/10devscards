---
import Layout from "../../../layouts/Layout.astro";
---

<Layout title="Zarządzanie Fiszkami - 10DevCards">
  <div class="max-w-6xl mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 id="deck-title" class="text-3xl font-bold text-gray-900">Ładowanie...</h1>
          <p id="deck-description" class="text-gray-600 mt-2">Ładowanie opisu...</p>
        </div>
        <div class="flex space-x-4">
          <button
            id="add-manual-flashcard-btn"
            class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
          >
            ➕ Dodaj Fiszkę
          </button>
        </div>
      </div>
    </div>

    <!-- Flashcards List -->
    <div class="bg-white rounded-lg shadow-md">
      <div class="p-6 border-b">
        <h2 class="text-lg font-semibold">
          Fiszki
          <span id="flashcards-count" class="text-gray-500 text-sm">(ładowanie...)</span>
        </h2>
      </div>

      <div id="flashcards-container" class="divide-y">
        <!-- Loading state -->
        <div id="loading-state" class="p-8 text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p class="mt-2 text-gray-500">Ładowanie fiszek...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Manual Flashcard Modal -->
  <div id="add-flashcard-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-semibold mb-4">Dodaj Nową Fiszkę</h3>
        <form id="add-flashcard-form">
          <div class="mb-4">
            <label for="flashcard-question" class="block text-sm font-medium text-gray-700 mb-2">
              Pytanie (max 256 znaków)
            </label>
            <textarea
              id="flashcard-question"
              rows="3"
              maxlength="256"
              class="w-full border-gray-300 rounded-md shadow-sm"
              required></textarea>
          </div>
          <div class="mb-6">
            <label for="flashcard-answer" class="block text-sm font-medium text-gray-700 mb-2">
              Odpowiedź (max 512 znaków)
            </label>
            <textarea
              id="flashcard-answer"
              rows="4"
              maxlength="512"
              class="w-full border-gray-300 rounded-md shadow-sm"
              required></textarea>
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              id="cancel-add-flashcard"
              class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400"
            >
              Anuluj
            </button>
            <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
              Dodaj Fiszkę
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', async () => {
      const token = localStorage.getItem("access_token");
      if (!token) {
        alert("Brak tokena autoryzacji");
        window.location.href = "/login";
        return;
      }
      
      const slug = window.location.pathname.split("/").pop();
      let deck = null;
      
      try {
        // Fetch deck details
        const deckRes = await fetch(`/api/decks/${slug}`, { 
          headers: { Authorization: `Bearer ${token}` } 
        });
        
        if (!deckRes.ok) {
          alert("Nie udało się załadować talii");
          window.location.href = "/";
          return;
        }
        
        const deckData = await deckRes.json();
        deck = deckData.data;
        document.getElementById("deck-title").textContent = deck.name;
        document.getElementById("deck-description").textContent = deck.description || '';

        // Load flashcards function
        async function loadFlashcards() {
          try {
            const res = await fetch(`/api/flashcards?deck_id=${deck.id}&limit=20&offset=0`, { 
              headers: { Authorization: `Bearer ${token}` } 
            });
            
            if (!res.ok) {
              alert("Nie udało się załadować fiszek");
              return;
            }
            
            const data = await res.json();
            const container = document.getElementById("flashcards-container");
            
            // Clear loading state
            const loadingState = document.getElementById("loading-state");
            if (loadingState) loadingState.style.display = "none";
            
            container.innerHTML = '';
            
            if (data.data.length === 0) {
              container.innerHTML = '<div class="p-8 text-center text-gray-500">Brak fiszek w tej talii.</div>';
              document.getElementById("flashcards-count").textContent = "(0)";
              return;
            }
            
            data.data.forEach(f => {
              const row = document.createElement('div');
              row.className = 'p-4 border-b flex flex-col gap-2';
              row.innerHTML = `
                <div class="flex justify-between items-start">
                  <div class="flex-1">
                    <div class="font-medium text-gray-900 mb-1">Pytanie:</div>
                    <div class="text-gray-700 mb-2">${f.question}</div>
                    <div class="font-medium text-gray-900 mb-1">Odpowiedź:</div>
                    <div class="text-gray-700">${f.answer}</div>
                  </div>
                  <span class="text-sm px-2 py-1 rounded ${f.status === 'accepted' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">${f.status}</span>
                </div>
              `;
              container.append(row);
            });
            
            // Update counts
            document.getElementById("flashcards-count").textContent = `(${data.pagination.total})`;
            
          } catch (error) {
            alert("Błąd podczas ładowania fiszek");
          }
        }

        // Initial load
        await loadFlashcards();
        
        // Setup form handlers
        const addForm = document.getElementById("add-flashcard-form");
        if (addForm) {
          addForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            
            const question = document.getElementById("flashcard-question").value.trim();
            const answer = document.getElementById("flashcard-answer").value.trim();
            
            if (!question || !answer) {
              alert("Pytanie i odpowiedź są wymagane");
              return;
            }
            
            try {
              const response = await fetch("/api/flashcards", {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${token}`,
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  deck_id: deck.id,
                  question,
                  answer,
                }),
              });
              
              if (response.ok) {
                alert("✅ Fiszka została dodana pomyślnie!");
                document.getElementById("add-flashcard-modal").classList.add("hidden");
                addForm.reset();
                await loadFlashcards();
              } else {
                const error = await response.json();
                alert("❌ " + (error.error?.message || "Nie udało się dodać fiszki"));
              }
            } catch (error) {
              alert("❌ Błąd podczas dodawania fiszki");
            }
          });
        }
        
        // Setup modal handlers
        const addBtn = document.getElementById("add-manual-flashcard-btn");
        const cancelBtn = document.getElementById("cancel-add-flashcard");
        const modal = document.getElementById("add-flashcard-modal");
        
        if (addBtn) addBtn.addEventListener("click", () => modal?.classList.remove("hidden"));
        if (cancelBtn) cancelBtn.addEventListener("click", () => modal?.classList.add("hidden"));
        
      } catch (error) {
        alert("Błąd podczas ładowania talii");
        window.location.href = "/";
      }
    });
  </script>
</Layout>
